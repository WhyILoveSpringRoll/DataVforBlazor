@namespace DataVforBlazor

<div id="@ID" class="dv-flyline-chart-enhanced"
     style="background-image: url(@Config.bgImgSrc);height:100%;width:@width">
    @if (flylines.Count() > 0)
    {
        <svg style="height:@height;width:@width">
            <defs>
                <radialGradient id="@flylineGradientId"
                            cx="50%" cy="50%" r="50%">
                    <stop offset="0%" stop-color="#fff"
                      stop-opacity="1" />
                    <stop offset="100%" stop-color="#fff"
                      stop-opacity="0" />
                </radialGradient>

                <radialGradient id="@haloGradientId"
                            cx="50%" cy="50%" r="50%">
                    <stop offset="0%" stop-color="#fff"
                      stop-opacity="0" />
                    <stop offset="100%" stop-color="#fff"
                      stop-opacity="1" />
                </radialGradient>
            </defs>

            <!-- points -->
            @foreach (var point in Config.flylinePoints)
            {
                <g key="@(point.key+rd.NextDouble())">
                    <defs>
                        @if (point.halo.show)
                        {
                            <circle id="halo@(unique+point.key)"
                        cx="@point.position.X"
                        cy="@point.position.Y">
                                <animate attributeName="r"
                             values="1;@point.halo.radius"
                             dur="@(point.halo.time)s"
                             repeatCount="indefinite" />
                                <animate attributeName="opacity"
                             values="1;0"
                             dur="@(point.halo.time)s"
                             repeatCount="indefinite" />
                            </circle>
                        }
                    </defs>

                    <!-- halo gradient mask -->
                    <mask id="mask@(unique+point.key)">
                        @if (point.halo.show)
                        {
                            <use href="#halo@(unique+point.key)" fill="url(#@haloGradientId)" />
                        }
                    </mask>

                    <!-- point halo -->
                    @if (point.halo.show)
                    {
                        <use href="#halo@(unique+point.key)" fill="@point.halo.color" mask="url(#mask@(unique+point.key))" />
                    }

                    <!-- point icon -->
                    @if (point.icon.show)
                    {
                        <image href="@point.icon.src" width="@point.icon.width" height="@point.icon.height" x="@point.icon.x" y="@point.icon.y" />
                    }


                    <!-- point text -->
                 
                    <text style="fontSize:@(point.text.fontSize)px;color:@(point.text.color)" fill="@point.text.color" x="@point.text.x" y="@point.text.y">
                        @if(point.text.show)
                        {
                            @point.name;
                        }
                    </text>
                </g>
            }


            <!-- flylines -->
            @foreach (var line in flylines)
            {
                var i = flylines.IndexOf(line);
                <g key="@(line.key+rd.NextDouble())">
                    <defs>
                        <path id="@line.key"
                      ref="@line.key"
                      d="@line.d"
                      fill="transparent" />
                    </defs>

                    <!-- orbit line -->
                    <use href="#@line.key"
                 stroke-width="@line.width"
                 stroke="@line.orbitColor" />

                    <!-- fly line gradient mask -->
                    <mask id="mask@(unique+line.key)">
                        <circle cx="0" cy="0" r="@line.radius" fill="url(#@flylineGradientId)">
                            <animateMotion dur="@line.time"
                                   path="@line.d"
                                   rotate="auto"
                                   repeatCount="indefinite" />
                        </circle>
                    </mask>

                    <!-- fly line -->
                    @if (i<flylineLengths.Count()&&flylineLengths[i] != 0)
                    {
                        <use 
                 href="#@line.key"
                 stroke-width="@line.width"
                 stroke="@line.color"
                 mask="url(#mask@(unique+line.key)">
                            <animate attributeName="stroke-dasharray"
                         from="0, @flylineLengths[i]"
                         to="@flylineLengths[i], 0"
                         dur="@line.time"
                         repeatCount="indefinite" />
                        </use>
                    }
                </g>
            }
        </svg>
    }
</div>