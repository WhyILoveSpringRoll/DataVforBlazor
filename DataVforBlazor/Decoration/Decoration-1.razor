@namespace DataVforBlazor
@inherits DecorationBase

<div class="dv-decoration-1" style="height:@(svgWH[1])px;width:@(svgWH[0])px">
    <svg style="transform:scale(@svgScale[0],@svgScale[1]);height:@(svgWH[1])px;width:@(svgWH[0])px">

        @foreach (var point in points)
        {
            if(rd.NextDouble()>0.6)
            {
                <rect v-if="Math.random() > 0.6"
              key="@point.GetHashCode()"
              fill="@MergedColor[0]"
              x="@(point.X-halfPointSideLength)"
              y="@(point.Y-halfPointSideLength)"
              width="@pointSideLength"
              height="@pointSideLength">
                @if(rd.NextDouble()>0.6)
                {
                    <animate 
                     attributeName="fill"
                     values="@MergedColor[0];transparent"
                     dur="1s"
                     begin="@(rd.NextDouble()*2)"
                     repeatCount="indefinite" />
                }
                </rect>
            }
        }

        @if(rects.Count()>0)
        {
            <rect 
              fill="@MergedColor[1]"
              x="@(rects[0].X-pointSideLength)"
              y="@(rects[0].Y-pointSideLength)"
              width="@(pointSideLength * 2)"
              height="@(pointSideLength * 2)">
                <animate attributeName="width"
                     values="0;@(pointSideLength * 2)"
                     dur="2s"
                     repeatCount="indefinite" />
                <animate attributeName="height"
                     values="0;@(pointSideLength * 2)"
                     dur="2s"
                     repeatCount="indefinite" />
                <animate attributeName="x"
                     values="@rects[0].X;@(rects[0].X - pointSideLength)"
                     dur="2s"
                     repeatCount="indefinite" />
                <animate attributeName="y"
                     values="@(rects[0].Y);@(rects[0].Y - pointSideLength)"
                     dur="2s"
                     repeatCount="indefinite" />
            </rect>
        }

       @if(rects.Count()>1)
       {
            <rect 
              fill="@MergedColor[1]"
              x="@(rects[1].X - 40)"
              y="@(rects[1].Y - pointSideLength)"
              width="40"
              height="@(pointSideLength * 2)">
                <animate attributeName="width"
                     values="0;40;0"
                     dur="2s"
                     repeatCount="indefinite" />
                <animate attributeName="x"
                     values="@(rects[1].X);@(rects[1].X - 40);@(rects[1].X)"
                     dur="2s"
                     repeatCount="indefinite" />
            </rect>
       }
    </svg>
</div>